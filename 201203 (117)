1.set classpath 에 대하여 설명하시오.
 - 용도 : 경로를 입력해 원하는 파일에 접근하기 위한 명령어
            (한 클래스 안에도 그 안에서 사용할 여러 클래스를 작성할 수 있음.
             이렇게 작성한 클래스들은 컴파일 하면 각각 .class 파일이 됨.
             그런데 만약 만들어진 .class 파일을 새 디렉토리를 만들어 저장하면 실행 x.
                                           ↓
             이유 : 현재 실행 위치와 다른 곳에 .class 파일이 있어서 찾을 수 없기 때문.
             이 파일을 찾기 위해 set classpath 명령어를 사용함)

 - 형태 : set classpath= . ;  +  찾을 경로 입력
           → 앞에 적혀 있는 현재 디렉토리에서 파일을 찾음( . ) + 입력한 경로에서도 함께 찾음 ( ; 뒤)
           → ; 로 계속 연결해주면 경로를 원하는 만큼 입력할 수 있음.
           → ex. C:\PackageStudy>set classpath=.;C:\PackageStudy\MyClass
                    ------------                 -----------------------
                    현재 디렉토리                     함께 찾을 디렉토리



2.절대경로와 상대경로에 대하여 설명하시오.
 - 절대 경로 
   ① 의미 : 파일이 위치한 경로를 가장 최상위 디렉토리부터 전부 표시하는 방법.
   ② 형태 : C:\ 로 시작 + 필요한 디렉토리까지 전체 표시
   ③ 예시 : C:\PackageStudy>set classpath=.;C:\PackageStudy\MyClass
                                            -----------------------
                                                  절대 경로

 - 상대 경로
   ① 의미 :  파일이 위치한 경로를 현재 디렉토리 기준에서 필요한 디렉토리만 표시하는 방법.
   ② 형태 : .\ + 필요한 디렉토리
   ③ 예시 : C:\PackageStudy>set classpath=.;.\MyClass
                                            ---------
                                             상대 경로



3. . 과 .. 의 차이는?
  - . : 현재 디렉토리
  - .. : 상위 디렉토리 (cd.. 을 입력하면, 상위 디렉토리로 위치 변경) 




4.package의 용도는?
  - 프로그래밍을 할 때는 여러 오픈 소스를 이용하거나, 다른 회사의 소스 코드를 사서 사용할 수 있음.
    이때 서로 다른 곳에서 가져온 여러 소스 코드의 클래스 이름이 서로 겹치는 경우가 생길 수 있음.
    이렇게 같은 이름을 가진 클래스의 기능을 사용해야 하는 경우, 문제가 생김.

  - 문제 ① 공간에서 충돌 : 같은 이름을 가진 클래스 파일은 같은 디렉토리에 저장할 수 x
         ② 접근 방법에서 충돌 : 해당 클래스로 인스턴스를 만든다면, 이름이 같기 때문에 
                                어떤 인스턴스의 주소를 가리키는지 알 수가 없게 됨.

                     ↓      이런 문제를 해결해서 클래스를 사용하기 위한 방법 : '패키지'

  - 문제 해결 ① 같은 이름을 가진 클래스여도, 서로 다른 패키지에 넣어주면 충돌 x.
                      ( 패키지라는 것은 기본적으로 '폴더'를 만들어 주는 것
                        = 서로 다른 폴더에는 같은 이름의 클래스 파일 저장 가능)
 	            ② 인스턴스를 만들 때, 패키지 이름을 클래스 이름 앞에 명시해주면,
                       명시된 패키지에 있는 클래스를 불러올 수 있음.
                 
                 
		 
                 
5.package 의 기본적인 명명법(이름짓는법)은?
  - 형태 : 상위 패키지.하위패키지.클래스 이름
  - 모든 글자 소문자 / java로 시작 x / 숫자로 시작 x / _ , $ 제외 특수문자 x
  - 실무에서는 대부분 회사 도메인 이름의 역순을 패키지 이름으로 사용.
    (도메인은 중복될 수 없기 때문에 고유한 이름을 가질 수 있음
     / 역순으로 사용하는 이유는 포괄적인 이름이 상위 패키지가 되도록 하기 위해)
  - ex. com.naver.프로젝트 이름 / com.daum.프로젝트 이름




6.정보은닉에 대하여 설명하시오.
  - 객체 지향 프로그래밍의 특징은 크게 네 가지임.
     ① 정보 은닉 (hidden information)
     ② 상속 (inheritance)
     ③ 다형성 (polymorphism)
     ④ 캡슐화(encapsulation)


  -  ① 정보 은닉 (hidden information) 
        → 필요 이유 : 사용자가 코드의 의도와 다른 오류를 발생시킬 수 있는 값에 직접 접근하는 것을 막기 위해
            ex. 
                    class Circle {
                        《 private 》 double rad = 0;      // 원의 반지름
                        final double PI = 3.14;

                        public Circle(double r) {
                             setRad(r);
                      }

                         public void setRad(double r) {
                          if(r < 0) { 
                                 rad = 0;
                                 return; 
                            }
                          rad = r;
                      }

                         public double getArea() {
                              return (rad * rad) * PI;
                         }
                    }
              -------------------------------------------------------
                    public static void main(String args[]) {
                        Circle c = new Circle(1.5);
                        System.out.println(c.getArea());

                      c.setRad(2.5);
                      System.out.println(c.getArea());
                        c.setRad(-3.3);			                          → 반지름이 음수로 입력되는 경우,
                      System.out.println(c.getArea());		              setRad 함수를 거쳐 거르도록 되어 있음.
                      c.rad = -4.5;    // 컴파일 오류 발생 안함 	       → 코드의 의도와 다르게 setRad 함수를 
                        System.out.println(c.getArea());		              거치지 않고 변수에 직접 접근해 변수에 값을 대입함. 
                    }					                                            이 경우 반지름이 음수로 입력된 오류 자체를 거르지 못하고,
                                                                          결과값도 양수로 출력됨.


        → 오류 방지 방법 : 사용자가 특정 부분에 접근하지 못하도록 함.
		                       = "접근 제한자"를 사용함
	      《 private 》      = 위 예시에서는 변수에 접근하지 못하도록 일반 인스턴스 변수 앞에 'private'이라는
		                         접근 제한자를 써주면 c.rad = - 4.5; 처럼 변수에 직접 접근하려 할 때,
		                         에러가 나면서 오류를 거를 수 있게 됨.
	                  	     = ★ 따라서 일반 인스턴스 변수 앞에는 접근 제한자 'private'을 반드시, 무조건 붙일 것 ★




7.접근제한자 4가지 종류에 대하여 설명하시오.
  - 위의 예시와 같이 변수 뿐만 아니라, 함수, 클래스에도 접근을 제어할 수 있도록 하는 키워드가 있음.
  - 그러나 변수, 함수, 클래스는 각각 붙일 수 있는 접근 제한자가 정해져 있음.

  - 종류 ① public
           ② protected
           ③ default
           ④ private




8.class 에서 붙일수 있는 접근 제한자 2개를 설명하고, 해당 접근제한자의 사용 목적은?
  - 클래스에 붙일 수 있는 접근 제한자는 public / default 두 가지만 가능.
  
  - public : 다른 모든 패키지에서 public이 붙은 클래스에 접근해 불러올 수 있음(import).
               = 다른 패키지에서도 해당 클래스로 객체 생성 가능
               = 어디서든 해당 클래스로 객체 생성 가능 (↔ default 상태인 클래스로 객체를 만들려면 에러 발생)
               
  - default : default 접근 제한자는 'default'라고 명시하는 것이 아니라, 아무 것도 붙지 않은 상태를 의미
	             = 같은 패키지 안에서만 객체를 생성할 수 있음.




9.가위, 바위, 보 게임 작성하시오.

package java_rec;

public class Game {
	// 가위바위보 게임 만들기
	
	String rock;
	String sci;
	String paper;
	
	
	public Game(String choice) {
		this.paper = paper;
		this.rock = rock;
		this.sci = sci;
	}
	
	public void meSci() {
		int num = (int)(Math.random() * 3);
		sci = "1";
		
		if(num == 1) {
			System.out.println("컴퓨터가 낸 가위바위보 : 가위");
		}else if(num == 2) {
			System.out.println("컴퓨터가 낸 가위바위보 : 바위");
		}else {
			System.out.println("컴퓨터가 낸 가위바위보 : 보");
		}
		
		if(Integer.parseInt(sci) == num) {
			System.out.println("비김");
		}else if(Integer.parseInt(sci) > num) {
			System.out.println("이김");
		}else {
			System.out.println("짐");
		}
			
	}
	
	public void meRock() {
		int num = (int)(Math.random() * 3);
		rock = "1";
		
		if(num == 1) {
			System.out.println("컴퓨터가 낸 가위바위보 : 바위");
		}else if(num == 2) {
			System.out.println("컴퓨터가 낸 가위바위보 : 보");
		}else {
			System.out.println("컴퓨터가 낸 가위바위보 : 가위");
		}
		
		if(Integer.parseInt(rock) == num) {
			System.out.println("비김");
		}else if(Integer.parseInt(rock) > num) {
			System.out.println("이김");
		}else {
			System.out.println("짐");
		}
	}
	
	public void mePaper() {
		int num = (int)(Math.random() * 3);
		paper = "1";
		
		if(num == 1) {
			System.out.println("컴퓨터가 낸 가위바위보 : 보");
		}else if(num == 2) {
			System.out.println("컴퓨터가 낸 가위바위보 : 가위");
		}else {
			System.out.println("컴퓨터가 낸 가위바위보 : 바위");
		}
		
		if(Integer.parseInt(paper) == num) {
			System.out.println("비김");
		}else if(Integer.parseInt(paper) > num) {
			System.out.println("이김");
		}else {
			System.out.println("짐");
		}
	}
}
-----------------------------------------------------------------------------------------------
package java_rec;

import java.util.Scanner;

public class GameResult {

	public static void main(String[] args) {
		Scanner scanner;
		
		while(true) {
			scanner = new Scanner(System.in);
			
			System.out.println("가위, 바위, 보 중 하나를 입력하세요");
			String choice = scanner.next();
			
			Game game = new Game(choice);
			
			if(choice.equals("paper") || choice.equals("Paper") || choice.equals("보")) {
				game.mePaper();
			}
			
			if(choice.equals("Sci") || choice.equals("sci") || choice.equals("가위")) {
				game.meSci();
			}
			
			if(choice.equals("Rock") || choice.equals("rock") || choice.equals("바위")) {
				game.meRock();
			}
			
			System.out.println();
		}
	
		
	}

}




10.아래와 같이 계산기 프로그램을 작성하시오.
==========================================================================================
10 + 9 (입력 예시)   // 입력을 한칸씩 띄우도록 할것 ) (+ 양쪽으로 띄우지 않으면 에러 발생)
10 + 9 = 19 (출력 예시)
계속하시겠습니까?
10 - 7
10 - 7 = 3
계속하시겠습니까?

============================================================================================
package java_rec;

public class AutoSum {
	int num1;
	int num2;
	String operator;
	
	public AutoSum(int num1, String operator, int num2) {
		this.num1 = num1;
		this.num2 = num2;
		this.operator = operator;
	}
	
	public void getSum() {
		int result1 = (num1 + num2);
		System.out.println(num1 + " + " + num2 + " = " + result1);
	}
	
	public void getSub() {
		int result2 = (num1 - num2);
		System.out.println(num1 + " - " + num2 + " = " + result2);
	}
}

-----------------------------------------------------------------------------
package java_rec;

import java.util.Scanner;

public class AutoSumResult {

	public static void main(String[] args) {
		Scanner scanner;
		
		while(true) {
			scanner = new Scanner(System.in);
						
			System.out.println("\n" + "연산식을 입력하세요");
			
			int input1 = scanner.nextInt();
			String input2 = scanner.next();
			int input3 = scanner.nextInt();
			
			AutoSum cal = new AutoSum(input1, input2, input3);
			
			if(input2.equals("+")) {
				cal.getSum();
			}else {
				cal.getSub();
			}
			
			System.out.println("\n" + "계속 하시겠습니까? Y/N");
			
			String answer = scanner.next();
			
			if(answer.equals("y") || answer.equals("Y")) {
				continue;
			}else {
				break;
			}
		}
		
		System.out.println("종료");
		scanner.close();
		
	}

}




