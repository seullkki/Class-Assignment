1.아래의 접근제한자에 대하여 설명하시오.
-private 
  ① 명시 가능한 곳 : 인스턴스 변수와 메소드에 붙일 수 있는 접근 제한자. 
  ② 접근 범위 :  private이 붙은 인스턴스 변수, 메소드는 " 같은 클래스 안"에서만 접근이 가능함.

-protected 
  ① 명시 가능한 곳 : 인스턴스 변수와 메소드에 붙일 수 있는 접근 제한자. 
  ② 접근 범위 :  상속 관계일 때, 상속을 한 번만 한다는 의미의 접근 제한자.

-default
  ① 명시 가능한 곳 : 클래스, 인스턴스 변수, 메소드에 붙일 수 있는 접근 제한자.
  ② 접근 범위 : default 접근 제한자는 default가 붙는 것이 아니고, 아무 것도 붙지 않은 상태를 의미.
               아무 것도 붙지 않은 클래스, 인스턴스 변수, 메소드는 같은 패키지 내에서만 접근이 가능함.

-public
  ① 명시 가능한 곳 : 클래스, 인스턴스 변수, 메소드에 붙일 수 있는 접근 제한자.
  ② 접근 범위 :  public이 붙은 클래스, 인스턴스 변수, 메소드는 어디서든 접근이 가능함.




2.지역변수에 접근제한자를 붙이지 않는 이유는?
 - 지역 변수는 함수 안에서만 유효한 변수를 의미하는데, 함수는 실행이 종료 되면 지역 변수도 함께 메모리에서 사라짐.
   따라서 public 같은 접근 제한자를 붙이는 것이 의미가 x.


3.캡슐화에 대하여 설명하시오.
 - 캡슐화란 좋은 프로그램을 짜는 방법에 대한 이야기.
 - 프로그램을 최종으로 사용하는 사용자가 사용하기 편리하도록 프로그램을 자는 방법.
 - 나쁜 캡슐화는 내가 걸린 감기의 증상에 따라 증상을 잡을 수 있는 기능을 가진 약을 각각 먹어야 할 때,
   약을 언제, 어떻게, 얼마나 먹어야 하는지와 같은 내용이 다 다름에도 최종 프로그램이 그 내용을 적절히 담아주지
   않으면 사용자는 그 내용을 알지 못하고 주어진 대로만 약을 복용할 수밖에 없음.
 - 좋은 캡슐화는 약에 대한 기능과 정보를 다 담은 약 하나를 가지고, 사용자가 그 기능과 정보가 정확히 어떤 것인지
   모르더라도 최종 프로그램 내에 이미 적절한 정보와 기능을 담아 놓았으므로 복용만 해도 내가 원하는 효과를 
   볼 수 있게 됨.


4.랜덤 숫자 맞추기 게임을 짜시오.


5.static 변수의 다른 용어 3가지를 말해 보시오.
 - static 변수는 여러 클래스에 공통으로 적용되는 변수를 만들고 싶을 때, 단 한 번만 선언하고 초기화해서
   모든 클래스에 적용하기 위한 것.
 - 따라서 "클래스 변수" / "공유 변수" / "정적 변수"라고 부르기도 함.


6.자바의 메모리 영역을 3가지로 나누고, 해당 영역에 들어가는 정보를 말하여 보시오.
 - 자바에서 객체를 만들고 연산을 할 때는 3개 메모리 영역에 정보를 나누어 올림.
 - 영역 ① 메소드 area, ② call stack, ③ heap
 - 작동 원리
   1. 컴파일 후 .class 파일을 실행하면, JVM에 의해 main 메소드가 ② 영역에 호출됨.
   
   2. 클래스의 객체를 생성하기 위해 new 키워드가 읽히기도 전에 ① 영역에 클래스에 대한 정보( = 함수에 대한 2진수 정보)가 올라감.
      동시에 스캔한 정보 중에서 static 변수를 찾아 ① 영역에 static 변수 방을 만들고 주어진 값을 대입함.
      + 클래스의 함수도 ① 영역에 방을 만듦. 
      ( ③ 영역에서 함수를 호출하면 함수가 가리키는 주소를 따라 ①영역의 함수로 연결됨)
      
   3. ② 영역에 호출된 main 함수 안에 객체를 만들기 위한 참조 변수의 방이 만들어짐.
      (참조 변수는 main 메소드의 지역 변수이기 때문)
      
   4. new 키워드가 작동하면서 ③ 영역에 객체가 만들어짐
      (클래스 내용에 따라 인스턴스 변수 방이 할당됨 + 주소값 부여됨 + ② 영역에 있는 참조 변수에 객체의 첫 번재 주소값이 들어감)
      → 여기서 static 변수의 방은 만들어지지 x, 인스턴스 변수 방만 만들어짐.
      → 대신 static 변수 방이 있는 ① 영역의 주소(4바이트)를 가리키고 있는 상태가 됨.
      → ③ 영역에서 인스턴스 변수에 값이 들어가기 전 참조형 변수의 초기화 값은 "null", int형은 "0"
      
   5. 객체의 인스턴스 변수에 입력된 값이 들어감.
   
   6. 만약 같은 클래스를 이용해 인스턴스를 여러 번 만든다면, 이미 ① 영역에 클래스 정보가 있으므로, 정보를 또 올리지 않고
      가진 정보를 이용해 인스턴스 생성.
      → 이때 클래스가 가진 static 변수는 역시 ① 영역에 있으므로, ① 영역의 같은 주소를 가리킨 상태가 됨.
      
   7. ② 영역에는 코드 진행에 따라 함수가 쌓이게 됨( = 콜 + 스택 )
      → 함수는 실행된 후 종료되므로, 종료된 함수는 ② 영역에서 사라짐
          (ex. println 함수는 출력 실행을 끝내면 ② 영역에서 사라짐)
          
   8. 만약 코드 진행 중에 static 변수에 새로운 값을 대입하는 경우가 생기면, static은 ③이 아닌 ① 영역에 있으므로
      static을 가리키는 주소값을 따라 ① 영역에 있는 static의 값을 바꿈.
      (값의 재할당이 아닌 연산이라면, 원래 static 변수가 가진 값에 추가로 연산이 이뤄짐)
      
   9. main 메소드의 모든 코드가 진행되면 main 메소드는 종료되고 ② 영역에서 사라짐. + 프로그램 종료


7.static 변수의 접근 방법은?
 ① static이 들어 있는 클래스를 객체화한 후, " 참조 변수.static 변수 이름 "
    → 직접 접근 방법이므로, 좋은 방법 x. 
    → static 변수에 private 접근 제한자를 붙이면 ① 방법으로 접근 x
 ② static이 들어 있는 " 클래스 이름.static 변수 이름 "


8.아래의 프로그램을 작성 하시오.

다음 멤버를 가지고 직사각형을 표현하는 Rectangle 클래스를 작성하라.

- int 타입의 x, y, width, height 필드: 사각형을 구성하는 점과 크기 정보
- x, y, width, height 값을 매개변수로 받아 필드를 초기화하는 생성자
- int square() : 사각형 넓이 리턴
- void show() : 사각형의 좌표와 넓이를 화면에 출력
- boolean contatins(Rectangle r) : 매개변수로 받은 r이 현 사각형 안에 있으면 true 리턴
- main() 메소드의 코드와 실행 결과는 다음과 같다
================================
public static void main(String[] args) {
   Rectangle r = new Rectangle(2, 2, 8, 7);
   Rectangle s = new Rectangle(5, 5, 6, 6);
   Rectangle t = new Rectangle(1, 1, 10, 10);
   
   r.show();
   System.out.println("s의 면적은 "+s.square());
   if(t.contains(r)) System.out.println("t는 r을 포함합니다.");
   if(t.contains(s)) System.out.println("t는 s를 포함합니다.");
}
(2,2)에서 크기가 8x7인 사각형
s의 면적은 36
t는 r을 포함합니다.
