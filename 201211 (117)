1.is a 관계와 has a 관계에 대하여 설명하시오.
 - 상속의 관계를 표현하는 방법
 - '자식 클래스 + is a / has a + 부모 클래스'를 읽어보았을 때, 문장이 성립되는지를 보면 어떤 관계인지 알 수 있음.
    ① IS-A : '자식클래스는 부모 클래스이다'
    ② HAS-A : '자식클래스는 부모 클래스를 가진다'
 - 상속 관계는 ① IS-A 관계여야 적절한 상속. 객체 간의 관계가 상속이므로, ① IS-A로 표현 가능.




2.다형성이란 무엇인가?
 - 오버 라이딩을 가능하게 하는 자바의 속성.
 - 다형성 : 다양한 형태를 가지고 있다
 - 자바에서 말하는 다형성은 상속 받은 인스턴스의 참조형과 참조 변수의 참조형이 서로 달라도 문제가 없는 것.
   → ex. 원래 우리가 알고 있는 형태 -------------------- 자식클래스(타입) 변수이름 = new 자식클래스(타입) ();
               다형성 적용된 형태 --------------------- 부모클래스 변수이름 = new 자식클래스 ();
 - 기본적으로 데이터 타입이 서로 다르면 형변환을 반드시 해야 하지만, 다형성이 적용된다면 형변환이 필요 x.
 - ★ 다형성 : 부모 = 자식 (without 형변환) ★
    → 주의점 : 자식 = 부모 (X)
 - Q. 자바에서 다형성이 가능한 이유?
    → [부모클래스 변수이름 = new 자식클래스();] ------------------- (O)
        A. 자식클래스는 부모 클래스를 상속 받아 메모리에 부모 클래스 + 자식(본인) 클래스 인스턴스를 가지고 있음.
            즉, 부모 클래스와 자식 클래스 모두의 인스턴스 멤버/메소드 접근이 가능하다는 의미.
            때문에 부모 클래스를 참조형으로 받는 변수는 자식클래스 주소를 가리키고 있고, 그 주소에는 부모 클래스
            정보가 있기 때문에 문제가 없이 부모 클래스 정보에 접근할 수 있음.

    → [자식클래스 변수이름 = new 부모클래스();] ------------------- (X)
        A. 어떤 상속도 받지 않은 부모 클래스의 인스턴스는 오로지 부모 클래스의 정보만 담겨 있음.
            그런데 자식 클래스를 참조형으로 받을 수 있는 변수는 부모 클래스만 있는 인스턴스 주소를 가리키고 있고,
            여기에서는 자식 클래스의 어떤 정보도 없기 때문에 접근이 불가능.


3.아래가 되지 않는 이유에 대하여 메모리 그림으로
설명하시오.MobilePhone(부모) SmartPhone(자식)
SmartPhone s = new MobilePhone();




4.메소드 오버라이딩 이란?
 - Q. 상속을 했는데 부모클래스와 자식클래스의 메소드가 이름, 리턴타입, 파라미터까지 모두 같고, 그 안에 담긴 구현
   내용만 다르다면? 
 - A. 메소드는 "오버 라이딩" 됨 = 덮어 씌워짐 = 부모 클래스의 메소드는 자식 클래스의 메소드로 덮어 씌워짐
       = ★ 오버라이딩은 자식 것 ★ = 결론적으로 자식의 메소드가 호출됨
 - 다형성이라는 속성을 통해 부모 클래스의 메소드에 접근하더라도, 메소드의 이름/리턴타입/파라미터가 같다면
   같은 성질의 자식 클래스 메소드가 호출, 출력됨.




5.갬블링 게임을 만들어보자. 두 사람이 게임을 진행한다. 이들의 이름을 키보드로 입력 받으며
 각 사람은 Person 클래스로 작성하라. 그러므로 프로그램에는 2개의 Person 객체가 생성되어야 한다.
 두 사람은 번갈아 가면서 게임을 진행하는데 각 사람이 자기 차례에서 <Enter> 키를 입력하면,
 3개의 난수가 발생되고 이 숫자가 모두 같으면 승자가 되고 게임이 끝난다. 난수의 범위를 너무 크게 잡으면 
3개의 숫자가 일치하게 나올 가능성이 적기 때문에 숫자의 범위는 1~3까지로 한다.

1번째 선수 이름>>수희
2번째 선수 이름>>연수
[수희]:
	3  1  1  아쉽군요!
[연수]:
	3  1  3  아쉽군요!
[수희]:
	2  2  1  아쉽군요!
[연수]:
	1  1  2  아쉽군요!
[수희]:
	3  3  3  수희님이 이겼습니다!
===============================================================




6.문제 10의 갬블링 게임을 n명이 하도록 수정하라. 실행 예시와 같이 게임에 참여하는 선수의 수를 입력받고 
각 선수의 이름을 입력받도록 수정하라.

겜블링 게임에 참여할 선수 숫자>>3
1번째 선수 이름>>황
2번째 선수 이름>>이
3번째 선수 이름>>김
[황]:
	2  3  3  아쉽군요!
[이]:
	1  2  2  아쉽군요!
[김]:
	2  2  3  아쉽군요!
[황]:
	3  2  2  아쉽군요!
[이]:
	1  1  3  아쉽군요!
[김]:
	2  2  1  아쉽군요!
[황]:
	2  2  2  황님이 이겼습니다!
====================================================================
package inheritance_assign;

import java.util.Scanner;

public class Person{
	Scanner scanner = new Scanner(System.in);
	private String[] player;

	public Person() {
	}
	
	private void entrance() {
		System.out.print("겜블링 게임에 참여할 선수 숫자 : ");
		int pNum = scanner.nextInt();
		player = new String[pNum];
		
		for(int i = 0; i < player.length; i++) {
			System.out.print((i+1) + "번째 선수 이름 >> ");
			String name = scanner.next();
			player[i] = name;
		}
	}
	
	private void runGame() {
		boolean go = true;
		int[] num = new int[3];
				
		while(go) {
			for(int i = 0; i < player.length; i++) {
				scanner.nextLine();				// '엔터'를 입력하면 한 명씩 출력하는 방법 / 이해 필요

				System.out.println("[" + player[i] + "] : ");
				num[i] = (int)((Math.random() * 3 + 1));
				System.out.print("\t" + " " + num[0] + " " + num[1] + " " + num[2] + " ");
				
				if((num[0] == num[1]) && (num[1] == num[2])) {
					System.out.println(player[i] + "님이 이겼습니다!");
					go = false;
					break;				// break가 작동하는 의미 이해 부족

				}else {
					System.out.println("아쉽군요!");
					continue;
				}
			}
		}
		scanner.close();
	}
	
	public void result() {
		entrance();
		runGame();
	}
}
---------------------------------------------------------------------------------------------------------------------------
package inheritance_assign;

public class PersonMain{
	public static void main(String[] args) {
		Person ps = new Person();
		
		ps.result();
	}
}





7.다음을 만족하는 클래스 Employee를 작성하시오
(8번문제부터는 이것과 관련된 문제입니다).

- 클래스 Employee(직원)은 클래스 Regular(정규직)와 Temporary(비정규직)의 상위 클래스

- 필드: 이름, 나이, 주소, 부서, 월급 정보를 필드로 선언

- 생성자 : 이름, 나이, 주소, 부서를 지정하는 생성자 정의

-메소드 printInfo() : 인자는 없고 자신의 필드 이름, 나이, 주소, 부서를 출력




8. 다음을 만족하는 클래스 Regular를 작성하시오.

- 클래스 Regular는 위에서 구현된 클래스 Employee의 하위 클래스

- 생성자 : 이름, 나이, 주소, 부서를 지정하는 상위 생성자 호출

- Setter : 월급 정보 필드를 지정

- 메소드 printInfo() : 인자는 없고 "정규직"이라는 정보와 월급을 출력


9. buyer 문제
다음은 물건을 구입하는 사람을 정의한 Buyer 클래스이다. 이 클래스는 멤버변수로 돈(money)과 장바구니(cart)를 
가지고 있다. 제품을 구입하는 기능의 buy 메서드와 장바구니에 구입한 물건을 추가하는 add 메서드, 구입한 물건의
목록과 사용 금액, 그리고 남은 금액을 출력하는 summary 메서드를 완성하시오.

 1. 메서드명 : buy
    기능 : 지정된 물건을 구입한다. 가진 돈(money)에서 물건의 가격을 빼고, 장바구니(cart)에 담는다.
            만일 가진 돈이 물건의 가격보다 적다면 바로 종료한다.
    반환타입 : 없음
    매개변수 : Product p - 구입할 물건

 2. 메서드명 : add
    기능 : 지정된 물건을 장바구니에 담는다. 만일 장바구니에 담을 공간이 없으면, 장바구니의 크기를 2배로 늘린
             다음에 담는다.
     반환타입 : 없음
     매개변수 : Product p - 구입할 물건

 3. 메서드명 : summary
    기능 : 구입한 물건의 목록과 사용 금액, 남은 금액을 출력한다.
    반환타입 : 없음
    매개변수 : 없음
